{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to aletyx Build of Apache KIE","text":"<p>Streamline your business automation journey with aletyx Build of Apache KIE, a powerful distribution that combines the robust capabilities of Apache KIE with enterprise-ready features and tooling.</p>"},{"location":"#why-choose-aletyx","title":"Why Choose aletyx?","text":"<ul> <li>Enterprise Ready: Built on the solid foundation of Apache KIE</li> <li>Modern Architecture: Cloud-native design with containerization support</li> <li>Developer Friendly: Comprehensive tooling and IDE integration</li> <li>Production Tested: Battle-tested in demanding enterprise environments</li> </ul>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#decision-management","title":"Decision Management","text":"<p>Design, deploy, and execute business rules and decision services using the most powerful open-source rules engine with Drools from Apache KIE</p>"},{"location":"#process-automation","title":"Process Automation","text":"<p>Create, manage, and optimize business processes with our comprehensive process automation capabilities.</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":"<p>Everything you need to begin your journey with aletyx, including environment setup and basic concepts.</p>"},{"location":"#how-to-guides","title":"\ud83d\udcd8 How-To Guides","text":"<p>Step-by-step guides for common tasks and advanced features.</p>"},{"location":"#workshops","title":"\ud83c\udf93 Workshops","text":"<p>Hands-on workshops to help you master aletyx features.</p>"},{"location":"#api-reference","title":"\ud83d\udd27 API Reference","text":"<p>Comprehensive API documentation for developers.</p>"},{"location":"#get-involved","title":"Get Involved","text":"<p>We welcome contributions from the community! Here's how you can get involved:</p> <ul> <li>Report Issues</li> <li>Contribute Code</li> <li>Join Discussions</li> </ul> <p>aletyx is proudly built on Apache KIE 10.0.0</p>"},{"location":"api/","title":"How-To","text":"<p>Welcome to the API guide. Here you'll find:</p> <ul> <li>Authentication</li> <li>endpoints</li> </ul>"},{"location":"getting-started/","title":"Getting Started with aletyx","text":"<p>Welcome to aletyx's Getting Started guide for the aletyx Build of Apache KIE X. This section will help you begin your journey with our platform and how to get up and running quickly!</p>"},{"location":"getting-started/#whats-inside","title":"What's Inside","text":"<ul> <li>Environment Setup - Step-by-step instructions for setting up aletyx</li> <li>Ubuntu Specific Setup - required installation for running Docker, Java 17 and Maven in Ubuntu</li> <li>Quick Start - Get up and running quickly with basic examples</li> </ul>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have:</p> <ul> <li>Java 17 or higher installed</li> <li>Maven 3.9.6 or higher</li> <li>Git</li> <li>A container platform like Docker or Podman</li> </ul>"},{"location":"getting-started/cloud-tools/","title":"Cloud Command Line Tools","text":""},{"location":"getting-started/cloud-tools/#kubernetes-cli-kubectl","title":"Kubernetes CLI (kubectl)","text":"macOSLinuxWindows <ol> <li> <p>Using Homebrew (recommended): <pre><code>brew install kubectl\n</code></pre></p> </li> <li> <p>Manual installation: <pre><code>Download kubectl\ncurl -LO \"https://dl.k8s.io/release/v1.29.2/bin/darwin/arm64/kubectl\"\n</code></pre></p> </li> <li> <p>Make kubectl executable <pre><code>chmod +x ./kubectl\n</code></pre></p> </li> <li> <p>Move kubectl to a directory in your PATH <pre><code>sudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre></p> </li> </ol> <ol> <li> <p>Using package manager (Ubuntu/Debian): ```{ .sh .copy } # Add Kubernetes apt repository sudo apt-get update sudo apt-get install -y apt-transport-https ca-certificates curl curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt-get update sudo apt-get install -y kubectl <pre><code>2. Manual installation:\n```{ .sh .copy }\n# Download kubectl\ncurl -LO \"https://dl.k8s.io/release/v1.29.2/bin/linux/amd64/kubectl\"\n</code></pre></p> </li> <li> <p>Make kubectl executable <pre><code>chmod +x ./kubectl\n</code></pre></p> </li> </ol> <ol> <li> <p>Using Chocolatey (recommended): <pre><code>    choco install kubernetes-cli\n</code></pre></p> </li> <li> <p>Manual installation: <pre><code># Create directory for kubectl\nNew-Item -Path 'C:\\Program Files\\kubectl' -Type Directory\n</code></pre></p> </li> <li> <p>Download kubectl <pre><code>curl.exe -LO \"https://dl.k8s.io/release/v1.29.2/bin/windows/amd64/kubectl.exe\"\n</code></pre></p> </li> <li> <p>Move kubectl to the created directory <pre><code>Move-Item .\\kubectl.exe 'C:\\Program Files\\kubectl\\'\n</code></pre></p> </li> <li> <p>Add to PATH <pre><code>$env:Path += \";C:\\Program Files\\kubectl\"\n[Environment]::SetEnvironmentVariable(\n    \"Path\",\n    [Environment]::GetEnvironmentVariable(\"Path\", [System.EnvironmentVariableTarget]::Machine) + \";C:\\Program Files\\kubectl\",\n    [System.EnvironmentVariableTarget]::Machine)\n</code></pre></p> </li> </ol>"},{"location":"getting-started/cloud-tools/#move-kubectl-to-a-directory-in-your-path","title":"Move kubectl to a directory in your PATH","text":"<pre><code>sudo mv ./kubectl /usr/local/bin/kubectl\n</code></pre>"},{"location":"getting-started/cloud-tools/#openshift-cli-oc","title":"OpenShift CLI (oc)","text":"WindowsmacOSLinux <ol> <li> <p>Using web console:</p> <ul> <li>Log into your OpenShift web console</li> <li>Click ? icon in the top right</li> <li>Select \"Command Line Tools\"</li> <li>Download Windows oc client</li> <li>Extract the archive</li> </ul> </li> <li> <p>Create directory for OpenShift CLI <pre><code>New-Item -Path 'C:\\Program Files\\OpenShift' -Type Directory\n</code></pre></p> </li> <li> <p>Move oc.exe to the created directory <pre><code>    Move-Item .\\oc.exe 'C:\\Program Files\\OpenShift\\'\n</code></pre></p> </li> <li> <p>Add to PATH     <pre><code>$env:Path += \";C:\\Program Files\\OpenShift\"\n[Environment]::SetEnvironmentVariable(\n\"Path\",\n[Environment]::GetEnvironmentVariable(\"Path\", [System.EnvironmentVariableTarget]::Machine) + \";C:\\Program Files\\OpenShift\",\n[System.EnvironmentVariableTarget]::Machine)\n</code></pre></p> </li> </ol> <ol> <li> <p>Using Homebrew: <pre><code>    brew install openshift-cli\n</code></pre></p> </li> <li> <p>Manual installation:</p> <ul> <li>Log into your OpenShift web console</li> <li>Click ? icon in the top right</li> <li>Select \"Command Line Tools\"</li> <li>Download macOS oc client</li> <li> <p>Extract the downloaded archive</p> <pre><code># Extract the downloaded archive\ntar xvf oc.tar.gz\n\n# Make oc executable\nchmod +x ./oc\n\n# Move to a directory in your PATH\nsudo mv ./oc /usr/local/bin/oc\n</code></pre> </li> </ul> </li> </ol> <ol> <li>Manual installation:</li> <li>Log into your OpenShift web console</li> <li>Click ? icon in the top right</li> <li>Select \"Command Line Tools\"</li> <li>Download Linux oc client</li> <li>Extract the downloaded archive</li> </ol> <pre><code># Extract the downloaded archive\ntar xvf oc.tar.gz\n\n# Make oc executable\nchmod +x ./oc\n\n# Move to a directory in your PATH\nsudo mv ./oc /usr/local/bin/oc\n</code></pre>"},{"location":"getting-started/cloud-tools/#verification-and-configuration","title":"Verification and Configuration","text":"<p>Verify the installations:</p> <pre><code># Verify kubectl\nkubectl version --client\n\n# Verify oc\noc version --client\n</code></pre>"},{"location":"getting-started/cloud-tools/#kubectl-configuration","title":"kubectl Configuration","text":"<pre><code># Create kubectl config directory if it doesn't exist\nmkdir -p ~/.kube\n\n# Set KUBECONFIG environment variable\nexport KUBECONFIG=~/.kube/config\n</code></pre>"},{"location":"getting-started/cloud-tools/#openshift-login","title":"OpenShift Login","text":"<pre><code># Login to OpenShift cluster\noc login --token=&lt;token&gt; --server=https://api.cluster-url:6443\n\n# View available projects\noc projects\n\n# Switch to a specific project\noc project &lt;project-name&gt;\n</code></pre> <p>Tip</p> <p>Store your OpenShift login token securely. You can get a new token from the OpenShift web console under your profile \u2192 Copy login command.</p>"},{"location":"getting-started/cloud-tools/#shell-completion","title":"Shell Completion","text":"BashZshPowerShell <pre><code># kubectl completion\necho 'source &lt;(kubectl completion bash)' &gt;&gt;~/.bashrc\n\n# oc completion\necho 'source &lt;(oc completion bash)' &gt;&gt;~/.bashrc\n</code></pre> <pre><code># kubectl completion\necho '[[$commands[kubectl]]] &amp;&amp; source &lt;(kubectl completion zsh)' &gt;&gt;~/.zshrc\n\n# oc completion\necho '[[ $commands[oc] ]] &amp;&amp; source &lt;(oc completion zsh)' &gt;&gt;~/.zshrc\n</code></pre> <pre><code># kubectl completion\nkubectl completion powershell | Out-String | Invoke-Expression\n\n# oc completion\noc completion powershell | Out-String | Invoke-Expression\n</code></pre>"},{"location":"getting-started/cloud-tools/#common-issues-and-troubleshooting","title":"Common Issues and Troubleshooting","text":"<p>Warning</p> <p>If you're behind a corporate proxy, you might need to configure proxy settings for both kubectl and oc.</p> <p>Common troubleshooting steps:</p> <pre><code># Check kubectl context\nkubectl config current-context\n\n# Check oc login status\noc whoami\n\n# View cluster info\nkubectl cluster-info\noc cluster-info\n\n# Check connection to cluster\nkubectl get nodes\noc get nodes\n</code></pre> <p>Tip</p> <p>Keep your CLI tools up to date with the cluster version to avoid compatibility issues. You can check the required versions in your cluster's documentation.</p>"},{"location":"getting-started/container-tools/","title":"Container Runtime Setup","text":"<p>Choose your preferred container runtime environment. We recommend either Docker or Podman.</p>"},{"location":"getting-started/container-tools/#docker-installation","title":"Docker Installation","text":"WindowsmacOSLinux <ol> <li> <p>Install Docker Desktop:</p> <ul> <li>Download Docker Desktop</li> <li>Run the installer</li> <li>During installation, ensure \"WSL 2\" option is selected</li> </ul> </li> <li> <p>Post-installation:</p> <pre><code>docker --version\ndocker compose version\n</code></pre> </li> <li> <p>Test Docker</p> <pre><code>docker run hello-world\n</code></pre> </li> <li> <p>Configure WSL 2 (if not already done): <pre><code>wsl --install\n</code></pre></p> </li> </ol> <ol> <li> <p>Install Docker Desktop using Homebrew:     <pre><code>    brew install --cask docker\n</code></pre></p> </li> <li> <p>Start Docker Desktop:</p> <pre><code>    open -a Docker\n</code></pre> </li> <li> <p>Wait for Docker to start, then verify</p> <pre><code>docker --version\ndocker compose version\n</code></pre> </li> <li> <p>Test Docker</p> <pre><code>docker run hello-world\n</code></pre> </li> <li> <p>Optional: Add Docker completion to your shell (for zsh):</p> <pre><code>echo 'zstyle \":completion:*:*:docker:*\" option-stacking yes' &gt;&gt; ~/.zshrc\necho 'zstyle \":completion:*:*:docker-*:*\" option-stacking yes' &gt;&gt; ~/.zshrc\n</code></pre> </li> </ol> <ol> <li> <p>Install Docker Engine:</p> <pre><code># Add Docker's official GPG key\nsudo apt-get update\nsudo apt-get install ca-certificates curl gnupg\nsudo install -m 0755 -d /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo chmod a+r /etc/apt/keyrings/docker.gpg\n</code></pre> </li> <li> <p>Add the repository to Apt sources</p> <pre><code>echo \\\n  \"deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  \"$(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\")\" stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre> </li> <li> <p>Install Docker packages     <pre><code>sudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre></p> </li> <li> <p>Post-installation steps:</p> <pre><code># Add your user to the docker group\nsudo usermod -aG docker $USER\n</code></pre> </li> <li> <p>Apply group changes (or log out and back in)     <pre><code>newgrp\n</code></pre></p> </li> <li> <p>Test Docker     <pre><code>docker run hello-world\n</code></pre></p> </li> </ol>"},{"location":"getting-started/container-tools/#podman-installation","title":"Podman Installation","text":"WindowsmacOSLinux <ol> <li> <p>Install Podman Desktop:</p> <ul> <li>Download Podman Desktop</li> <li>Run the installer - Follow the installation wizard</li> </ul> </li> <li> <p>Verify installation:     <pre><code>podman --version\npodman machine init\npodman machine start\n</code></pre></p> </li> </ol> <ol> <li> <p>Install Podman using Homebrew: <pre><code>brew install podman\n</code></pre></p> </li> <li> <p>Initialize and start Podman:</p> <pre><code># Initialize Podman machine\npodman machine init\n\n# Start Podman machine\npodman machine start\n\n# Verify installation\npodman --version\n\n# Test Podman\npodman run hello-world\n</code></pre> </li> <li> <p>Optional: Add Podman completion to your shell (for zsh):     <pre><code>echo 'autoload -Uz compinit' &gt;&gt; ~/.zshrc\necho 'compinit' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> </ol> <ol> <li> <p>Install Podman:</p> <pre><code># Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install -y podman\n</code></pre> </li> <li> <p>Verify installation     <pre><code>podman --version\n</code></pre></p> </li> <li> <p>Test Podman     <pre><code>podman run hello-world\n</code></pre></p> </li> </ol>"},{"location":"getting-started/container-tools/#container-compose-setup","title":"Container Compose Setup","text":"Docker Compose <p>Docker Compose is included with Docker Desktop for Windows and macOS.</p>"},{"location":"getting-started/container-tools/#for-linux","title":"For Linux:","text":"<pre><code># Install Docker Compose plugin\nsudo apt-get update\nsudo apt-get install docker-compose-plugin\n\n    # Verify installation\n    docker compose version\n</code></pre> Podman Compose <pre><code># Install Podman Compose using pip\npip3 install podman-compose\n\n# Verify installation\npodman-compose version\n</code></pre>"},{"location":"getting-started/container-tools/#container-configuration","title":"Container Configuration","text":"DockerPodman <p>Configure Docker resources (in Docker Desktop): 1. Open Docker Desktop 2. Go to Settings (\u2699\ufe0f) 3. Recommended settings: - CPUs: At least 2 - Memory: At least 4 GB - Swap: At least 1 GB - Disk image size: At least 60 GB</p> <p>Configure Podman machine resources:</p> <p>```{ .sh .copy } # Create a new machine with custom resources podman machine init --cpus 2 --memory 4096 --disk-size 60</p> <pre><code># Start the machine\npodman machine start\n</code></pre> <p>```</p>"},{"location":"getting-started/container-tools/#verify-installation","title":"Verify Installation","text":"<p>Test your container environment with a simple container:</p> DockerPodman <ol> <li> <p>Pull and run nginx <pre><code>docker run -d -p 8080:80 --name test-nginx nginx\n</code></pre></p> </li> <li> <p>Check container status <pre><code>docker ps\n</code></pre></p> </li> <li> <p>Stop and remove the container <pre><code>    docker stop test-nginx\n    docker rm test-nginx\n</code></pre></p> </li> </ol> <ol> <li> <p>Pull and run nginx     <pre><code>podman run -d -p 8080:80 --name test-nginx nginx\n</code></pre></p> </li> <li> <p>Check container status     <pre><code>podman ps\n</code></pre></p> </li> <li> <p>Stop and remove the container     <pre><code>podman stop test-nginx\npodman rm test-nginx\n</code></pre></p> </li> </ol>"},{"location":"getting-started/container-tools/#troubleshooting","title":"Troubleshooting","text":"Docker Common issues and solutionsPodman common issues and solutions <ol> <li> <p>Reset Docker Desktop    <pre><code>docker system prune -a\n</code></pre></p> </li> <li> <p>Check Docker status    <pre><code>docker info\n</code></pre></p> </li> <li> <p>View Docker logs    <pre><code>docker logs &lt;container-name&gt;\n</code></pre></p> </li> </ol> <ol> <li> <p>Reset Podman Machine    <pre><code>podman machine stop\npodman machine rm\npodman machine init\npodman machine start\n</code></pre></p> </li> <li> <p>Check Podman status    <pre><code>podman info\n</code></pre></p> </li> <li>View Podman logs    <pre><code>podman logs &lt;container-name&gt;\n</code></pre></li> </ol>"},{"location":"getting-started/environment-setup/","title":"Environment Setup","text":"<p>This guide will help you set up your development environment for aletyx Build of Apache KIE X. We'll cover installation and configuration of all required tools and dependencies.</p>"},{"location":"getting-started/environment-setup/#prerequisites-overview","title":"Prerequisites Overview","text":"<p>The following tools are required for development:</p> <ul> <li>Java 17 (Eclipse Temurin, Amazon Corretto, or other community distribution)</li> <li>Maven 3.9.6 or higher</li> <li>Git</li> <li>Container runtime (Docker or Podman)</li> <li>Kubernetes tools (kubectl)</li> <li>OpenShift CLI (oc)</li> <li>VS Code with extensions</li> </ul>"},{"location":"getting-started/environment-setup/#package-manager-setup","title":"Package Manager Setup","text":"<p>If possible, to simplify the configurations, we recommend the usage of Package Managers like Homebrew, Chocolatey, or Apt to get the required elements for your environment. This is not required, but greatly simplifies the process.</p> Package Manager Windows (Chocolatey)macOS (Homebrew)Linux (apt) <ol> <li> <p>Open PowerShell as Administrator (Right-click, \"Run as Administrator\")</p> </li> <li> <p>Install Chocolatey:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> </li> <li> <p>Verify installation:</p> <pre><code>choco --version\n</code></pre> </li> </ol> <ol> <li> <p>Install Homebrew:         <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre></p> </li> <li> <p>Add Homebrew to your PATH:</p> <ol> <li> <p>For Apple Silicon Macs         <pre><code>echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> <li> <p>For Intel Macs         <pre><code>echo 'eval \"$(/usr/local/bin/brew shellenv)\"' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> </ol> </li> <li> <p>Reload your shell configuration:         <pre><code>source ~/.zshrc\n</code></pre></p> </li> </ol> <p>Linux generally comes with its package manager, but ensure it's up to date:</p> <pre><code>    sudo apt update &amp;&amp; sudo apt upgrade\n</code></pre>"},{"location":"getting-started/environment-setup/#initial-java-setup-with-maven","title":"Initial Java Setup with Maven","text":"<p>We recommend using Eclipse Temurin (formerly AdoptOpenJDK) 17 for development:</p> JavaUsing SDKMAN! HomebrewLinuxWindows <pre><code># Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Java\nbrew install --cask temurin17\n\n# Install Maven\nbrew install maven\n</code></pre> <pre><code># Install Java\nsudo apt-get update\nsudo apt-get install -y temurin-17-jdk\n\n# Install Maven\nsudo apt-get install maven\n</code></pre> <pre><code># Using Chocolatey\nchoco install temurin17\nchoco install maven\n</code></pre> macOSLinux <pre><code># Install SDKMAN!\ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\n# Install Java and Maven\nsdk install java 17.0.10-tem\nsdk install maven 3.9.9\n</code></pre> <pre><code># Install SDKMAN!\ncurl -s \"https://get.sdkman.io\" | bash\nsource \"$HOME/.sdkman/bin/sdkman-init.sh\"\n\n# Install Java and Maven\nsdk install java 17.0.10-tem\nsdk install maven 3.9.9\n</code></pre>"},{"location":"getting-started/environment-setup/#container-runtime","title":"Container Runtime","text":"DockerPodman macOSLinuxWindows <pre><code>brew install --cask docker\n</code></pre> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre> <p>Download and install Docker Desktop</p> macOSLinuxWindows <pre><code>brew install podman\npodman machine init\npodman machine start\n</code></pre> <pre><code>sudo apt-get update\nsudo apt-get install -y podman\n</code></pre> <p>Download and install Podman Desktop</p>"},{"location":"getting-started/git-configuration/","title":"GitHub Integration with Apache KIE Sandbox","text":""},{"location":"getting-started/git-configuration/#overview","title":"Overview","text":"<p>Apache KIE Sandbox enables a top-down approach to business automation by allowing you to:</p> <ul> <li>Create decision and process models</li> <li>Publish projects directly to various Git providers</li> <li>Synchronize changes between Apache KIE Sandbox and Git</li> <li>Deploy projects through traditional deployment pipelines</li> </ul>"},{"location":"getting-started/git-configuration/#connecting-to-github","title":"Connecting to GitHub","text":""},{"location":"getting-started/git-configuration/#generate-a-github-token","title":"Generate a GitHub Token","text":"<ol> <li>Go to your GitHub account settings</li> <li>Navigate to Developer settings \u2192 Personal access tokens \u2192 Tokens (classic)</li> <li>Click Generate new token</li> <li>Configure your token:</li> </ol> <pre><code>Name: Apache KIE Sandbox Integration  # Or any meaningful name\nExpiration: Choose between 30, 60, 90 days or no expiration\nRequired scopes:\n  - repo (Required)\n  - gist (Required)\nOptional scopes:\n  - workflow\n  - write:packages\n  - read:packages\n</code></pre> <p>Tip</p> <p>Copy your token immediately after generation - it won't be shown again Keep your token secure - it provides access to your GitHub account</p>"},{"location":"getting-started/git-configuration/#connect-apache-kie-sandbox-to-github","title":"Connect Apache KIE Sandbox to GitHub","text":"<ol> <li>In Apache KIE Sandbox, click the User icon in the top navigation</li> <li>Select Connect to an account</li> <li>Choose GitHub from the provider options</li> <li>Click Generate new token if you haven't already generated one</li> <li>Paste your GitHub token in the connection wizard</li> <li>Verify the connection is successful - you should see:</li> <li>Your GitHub username</li> <li>Connection status</li> <li>Available repositories</li> </ol>"},{"location":"getting-started/git-configuration/#next-steps","title":"Next Steps","text":"<p>After connecting GitHub to Apache KIE Sandbox, you can:</p> <ul> <li>Create new projects</li> <li>Sync existing projects</li> <li>Manage version control directly from the Apache KIE Sandbox interface</li> <li>Deploy your projects using standard CI/CD pipelines</li> </ul> <p>Tip</p> <p>Keep your token's expiration date in mind - set a reminder to regenerate it before it expires to maintain continuous integration.</p>"},{"location":"getting-started/java-setup/","title":"Java Installation and Configuration","text":"WindowsmacOSLinux <ol> <li> <p>Install Java using Chocolatey:</p> <pre><code>choco install temurin17\n</code></pre> </li> <li> <p>JAVA_HOME (Run in PowerShell as Administrator):</p> <pre><code>    [Environment]::SetEnvironmentVariable(\n    \"JAVA_HOME\",\n    \"C:\\Program Files\\Eclipse Adoptium\\jdk-17.0.10.7-hotspot\",\n    [System.EnvironmentVariableTarget]::Machine)\n</code></pre> </li> <li> <p>Add Java to PATH (Run in PowerShell as Administrator):</p> <pre><code>[Environment]::SetEnvironmentVariable(\n    \"Path\",\n    [Environment]::GetEnvironmentVariable(\"Path\", \"Machine\") + \";%JAVA_HOME%\\bin\",\n    [System.EnvironmentVariableTarget]::Machine)\n</code></pre> </li> <li> <p>Verify installation (open a new PowerShell window):</p> <pre><code>java --version\necho $env:JAVA_HOME\n</code></pre> </li> </ol> <ol> <li> <p>Install Java:     <pre><code>brew install --cask temurin17\n</code></pre></p> </li> <li> <p>Add Java environment variables to your shell configuration (for zsh):     <pre><code>echo 'export JAVA_HOME=$(/usr/libexec/java_home -v 17)' &gt;&gt; ~/.zshrc\necho 'export PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> <li> <p>Create a helper function to switch Java versions (optional):     <pre><code>echo 'function setjdk() {\n    export JAVA_HOME=$(/usr/libexec/java_home -v $1)\n    echo \"JAVA_HOME set to $JAVA_HOME\"\n    java -version\n}' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> <li> <p>Reload shell configuration:     <pre><code>source ~/.zshrc\n</code></pre></p> </li> <li> <p>Verify installation:     <pre><code>java --version\necho $JAVA_HOME\n</code></pre></p> </li> </ol> <ol> <li> <p>Install Java:     <pre><code>sudo apt-get update\nsudo apt-get install -y temurin-17-jdk\n</code></pre></p> </li> <li> <p>Set JAVA_HOME and update PATH (for bash):     <pre><code>echo 'export JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:/bin/java::\")' &gt;&gt; ~/.bashrc\necho 'export PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; ~/.bashrc\n</code></pre></p> <p>For zsh users: <pre><code>echo 'export JAVA_HOME=$(readlink -f /usr/bin/java | sed \"s:/bin/java::\")' &gt;&gt; ~/.zshrc\necho 'export PATH=$JAVA_HOME/bin:$PATH' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> <li> <p>Reload shell configuration:     <pre><code># For bash\nsource ~/.bashrc\n\n# For zsh\nsource ~/.zshrc\n</code></pre></p> </li> <li> <p>Verify installation:     <pre><code>java --version\necho $JAVA_HOME\n</code></pre></p> </li> </ol>"},{"location":"getting-started/java-setup/#troubleshooting","title":"Troubleshooting","text":"WindowsmacOSLinux <p>If Java command is not recognized after installation:     1. Open System Properties (Win + R, type <code>sysdm.cpl</code>)     2. Click \"Environment Variables\"     3. Verify JAVA_HOME exists and points to correct directory     4. Verify Path includes <code>%JAVA_HOME%\\bin</code>     5. Open new command prompt to test</p> <ul> <li>\"Java command is not recognized\":</li> </ul> <pre><code>ls -l /Library/Java/JavaVirtualMachines/ # Verify Java installation\n</code></pre> <ul> <li>Verify JAVA_HOME</li> </ul> <pre><code>/usr/libexec/java_home -V\n</code></pre> <ul> <li>If Java command is not recognized:</li> </ul> <pre><code># Check Java alternatives\n    sudo update-alternatives --config java\n\n    # Verify installation path\n    which java\n    readlink -f $(which java)\n</code></pre>"},{"location":"getting-started/java-setup/#additional-configuration-tips","title":"Additional Configuration Tips","text":"WindowsmacOSLinux <ul> <li> <p>Create a <code>.gitconfig</code> file in your home directory:</p> <pre><code>notepad \"$env:USERPROFILE\\.gitconfig\"\n</code></pre> </li> <li> <p>Add basic Git configuration:     <pre><code>[user]\n    name = Your Name\n    email = your.email@example.com\n[core]\n    autocrlf = true\n    editor = notepad\n</code></pre></p> </li> </ul> <ul> <li> <p>Recommended aliases for your <code>.zshrc</code>:</p> <pre><code># Java and Maven helpers\necho 'alias j17=\"setjdk 17\"' &gt;&gt; ~/.zshrc\necho 'alias mvnc=\"mvn clean\"' &gt;&gt; ~/.zshrc\necho 'alias mvnp=\"mvn package\"' &gt;&gt; ~/.zshrc\necho 'alias mvni=\"mvn install\"' &gt;&gt; ~/.zshrc\n</code></pre> </li> <li> <p>Recommended Git helpers     <pre><code>echo 'alias gs=\"git status\"' &gt;&gt; ~/.zshrc\necho 'alias gp=\"git pull\"' &gt;&gt; ~/.zshrc\necho 'alias gc=\"git commit\"' &gt;&gt; ~/.zshrc\n</code></pre></p> </li> </ul> <ul> <li> <p>Java and Maven helpers     <pre><code>echo 'alias j17=\"export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk\"' &gt;&gt; ~/.bashrc\necho 'alias mvnc=\"mvn clean\"' &gt;&gt; ~/.bashrc\necho 'alias mvnp=\"mvn package\"' &gt;&gt; ~/.bashrc\necho 'alias mvni=\"mvn install\"' &gt;&gt; ~/.bashrc\n</code></pre></p> </li> <li> <p>Git helpers     <pre><code>echo 'alias gs=\"git status\"' &gt;&gt; ~/.bashrc\necho 'alias gp=\"git pull\"' &gt;&gt; ~/.bashrc\necho 'alias gc=\"git commit\"' &gt;&gt; ~/.bashrc\n</code></pre></p> </li> </ul>"},{"location":"getting-started/ubuntu/","title":"Ubuntu Environment Setup Guide for Apache Kogito","text":"<p>This guide provides step-by-step instructions for setting up your development environment for Apache Kogito on Ubuntu. The setup includes Docker, Java 17, Maven, and Visual Studio Code.</p>"},{"location":"getting-started/ubuntu/#docker-installation","title":"Docker Installation","text":""},{"location":"getting-started/ubuntu/#1-remove-conflicting-packages","title":"1. Remove Conflicting Packages","text":"<p>First, remove any old or conflicting Docker installations to ensure a clean setup:</p> <pre><code>sudo apt remove docker docker-engine docker.io containerd runc\n</code></pre>"},{"location":"getting-started/ubuntu/#2-install-prerequisites","title":"2. Install Prerequisites","text":"<p>Install necessary packages to allow apt to use repositories over HTTPS:</p> <pre><code>sudo apt install -y \\\n apt-transport-https \\\n ca-certificates \\\n curl \\\n gnupg \\\n lsb-release\n</code></pre>"},{"location":"getting-started/ubuntu/#3-set-up-docker-repository","title":"3. Set Up Docker Repository","text":"<p>Add Docker's official GPG key to ensure package authenticity:</p> <pre><code>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n</code></pre> <p>Add the stable Docker repository to APT sources:</p> <pre><code>echo \\\n \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\n $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n</code></pre>"},{"location":"getting-started/ubuntu/#4-install-docker-engine","title":"4. Install Docker Engine","text":"<p>Update package index and install the latest version of Docker Engine and containerd:</p> <pre><code>sudo apt update\nsudo apt install -y docker-ce docker-ce-cli containerd.io\n</code></pre>"},{"location":"getting-started/ubuntu/#5-configure-docker-user-permissions","title":"5. Configure Docker User Permissions","text":"<p>Add your user to the docker group to run Docker commands without sudo:</p> <pre><code>sudo usermod -aG docker $USER\n</code></pre>"},{"location":"getting-started/ubuntu/#6-configure-docker-service","title":"6. Configure Docker Service","text":"<p>Start and enable the Docker service to run on system startup:</p> <pre><code>sudo systemctl start docker\nsudo systemctl enable docker\n</code></pre>"},{"location":"getting-started/ubuntu/#docker-compose-installation","title":"Docker Compose Installation","text":""},{"location":"getting-started/ubuntu/#1-install-docker-compose","title":"1. Install Docker Compose","text":"<p>Download and install the latest stable version of Docker Compose:</p> <pre><code>sudo curl -L \"https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64\" -o /usr/local/bin/docker-compose\n</code></pre> <p>Make the binary executable:</p> <pre><code>sudo chmod +x /usr/local/bin/docker-compose\n</code></pre> <p>Verify the installation:</p> <pre><code>docker-compose --version\n</code></pre>"},{"location":"getting-started/ubuntu/#visual-studio-code-installation","title":"Visual Studio Code Installation","text":"<p>Install Visual Studio Code, a powerful IDE with excellent Docker and Java support. This benefit is only grown more within the Apache KIE Community with provided plugins to add to the power of the tool!</p> <pre><code>wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor &gt; packages.microsoft.gpg\nsudo install -D -o root -g root -m 644 packages.microsoft.gpg /etc/apt/keyrings/packages.microsoft.gpg\nsudo sh -c 'echo \"deb [arch=amd64,arm64,armhf signed-by=/etc/apt/keyrings/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main\" &gt; /etc/apt/sources.list.d/vscode.list'\nrm -f packages.microsoft.gpg\nsudo apt update\nsudo apt install -y code\n</code></pre>"},{"location":"getting-started/ubuntu/#java-development-environment","title":"Java Development Environment","text":""},{"location":"getting-started/ubuntu/#1-install-openjdk-17","title":"1. Install OpenJDK 17","text":"<p>Install the Java Development Kit version 17:</p> <pre><code>sudo apt install -y openjdk-17-jdk\njava --version\n</code></pre>"},{"location":"getting-started/ubuntu/#2-install-and-configure-maven","title":"2. Install and Configure Maven","text":"<p>Download and install Apache Maven 3.9.7:</p> <pre><code>wget https://dlcdn.apache.org/maven/maven-3/3.9.7/binaries/apache-maven-3.9.7-bin.tar.gz\n</code></pre> <p>Extract Maven to the /opt directory:</p> <pre><code>sudo tar xf apache-maven-3.9.7-bin.tar.gz -C /opt\n</code></pre> <p>Create a symbolic link for easier version management:</p> <pre><code>sudo ln -s /opt/apache-maven-3.9.7 /opt/maven\n</code></pre> <p>Confirm the Java that you're using with:</p> <pre><code>sudo update-alternatives --list java\n</code></pre> <pre><code>/usr/lib/jvm/java-17-openjdk-amd64/bin/java\n</code></pre> <p>Tip</p> <p>Make sure you understand which version of Java you're using, if you're using an arm64 deployment of Ubuntu, then you will probably have /usr/lib/jvm/java-17-openjdk-arm64/bin/java instead of -amd64 as seen in the message above.</p> <p>Configure environment variables for Java and Maven in your ~/.bashrc:</p> <pre><code>export M2_HOME=/opt/maven\nexport PATH=${M2_HOME}/bin:${PATH}\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n</code></pre> <p>Load the new environment variables:</p> <pre><code>source ~/.bashrc\n</code></pre> <p>Verify Maven installation:</p> <pre><code>mvn -version\n</code></pre>"},{"location":"getting-started/ubuntu/#next-steps","title":"Next Steps","text":"<p>After completing this setup:</p> <ol> <li>Log out and log back in for group changes to take effect</li> <li>Test Docker installation by running: <code>docker run hello-world</code></li> <li>Install recommended VS Code extensions for Java and Docker development</li> <li>Configure Maven settings if working with private repositories</li> </ol>"},{"location":"getting-started/ubuntu/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ul> <li>If Docker commands fail, ensure your user is properly added to the docker group</li> <li>If Maven isn't recognized, verify the environment variables are properly set</li> <li>For VS Code extensions, ensure Java Extension Pack is installed for full Java support</li> </ul>"},{"location":"how-to/","title":"How-To","text":"<p>Welcome to the How-To guide. Here you'll find:</p> <ul> <li>guide1</li> <li>guide2</li> </ul>"},{"location":"workshops/","title":"Workshops","text":"<p>Welcome to the Workshops section. Here you'll find:</p> <ul> <li>workshop1</li> </ul>"}]}